/**
 * NuID Auth API Interface
 * @module auth
 */

const http = require('../http')

/**
 *
 * @typedef VerifiedCredential
 * @type {object}
 */

/**
 * @typedef Credential
 * @type {object}
 */

/**
 * @typedef Proof
 * @type {object}
 */

/**
 * @typedef CredentialCreateResponse
 * @type {object}
 * @property {string} nu/id - Unique encoded identifier for the credential, to
 *   be used as an external ID in your user database.
 * @property {Credential} nuid/credential - The full credential object. This can
 *   be retrieved at any time by supplying the `nu/id` to the [[credentialGet]]
 *   endpoint.
 */

/**
 * @typedef ChallengeGetResponse
 * @type {object}
 * @property {string} nuid.credential.challenge/jwt - Challenge encoded as a JWt.
 */

/**
 * @typedef ChallengeVerifyResponse
 * @type {object}
 * @property {boolean} verified - A boolean indicating a successful verification.
 */

/**
 * Store the given credential on chain.
 *
 * @see [@nuid/zk]{@link https://www.npmjs.com/package/@nuid/zk} npm package
 *   `Zk.verifiableFromSecret(secret)` fn for generating verified credentials.
 *
 *
 * @async
 * @param {VerifiedCredential} verifiedCredential - The verified credential to store.
 * @return {Promise<CredentialCreateResponse>}
 */
module.exports.credentialCreate = verifiedCredential =>
  http.post('/credential', { 'nuid.credential/verified': verifiedCredential })

/**
 * Get a credential keyed by the `nu/id`.
 *
 * @async
 * @param {string} nuid - The user's unique nuid for this credential.
 * @return {Promise<Credential>}
 */
module.exports.credentialGet = nuid => http.get(`/credential/${nuid}`)

/**
 * Get a challenge for the user's credential keyed by the `nuid`.
 *
 * @async
 * @param {Credential} credential - The user credential to retrive a challenge from.
 * @return {Promise<ChallengeGetResponse>}
 */
module.exports.challengeGet = credential => http.post('/challenge', credential)

/**
 * Verify a credential challenge with an associated proof. You'll first need
 * to get a challenge using [[challengeGet]] for a give nuid. Once you have
 * the challenge JWT, decode it and use the claims to create a proof with
 * the user's secret/password.
 *
 * @see [[challengeGet]] for getting a challenge.
 * @see [@nuid/zk]{@link https://www.npmjs.com/package/@nuid/zk} npm package
 *   `Zk.proofFromSecretAndChallenge(password, challengeClaims)` fn for
 *   generating verified credentials.
 *
 * @async
 * @param {string} challengeJWT - The JWT received from  a call to [[challengeGet]]
 * @param {Proof} proof - The proof generated by calling `Zk.proofFromSecretAndChallenge(password, challengeClaims)`
 * @return {Promise<ChallengeVerifyResponse>}
 */
module.exports.challengeVerify = (challengeJWT, proof) =>
  http
    .post('/challenge/verify', {
      'nuid.credential.challenge/jwt': challengeJWT,
      'nuid.credential/proof': proof
    })
    .then(res => (res.ok ? { verified: true } : { verified: false }))
