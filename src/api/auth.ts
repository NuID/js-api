/**
 * NuID Auth API Interface
 *
 * @module api/auth
 */

import * as http from '../http'
import { Response } from 'node-fetch'

/**
 * The encoded credential to be used as a unique identifier for a credential.
 */
export type NuID = string

/**
 * Encoded object payload conforming to the JWT spec.
 */
export type JWT = string

/**
 * A credential which has been created and proved in one step by calling
 * `Zk.verifiableFromSecret(password)`.
 */
export interface VerifiedCredential {} // TODO

/**
 * An object uniquely encapsulating a zero knowledge secret.
 */
export interface Credential {} // TODO

/**
 * A signed object generated by calling `Zk.proofFromSecretAndChallenge(password, challengeClaims)`.
 */
export interface Proof {} // TODO

/**
 * Request object for calls to [[credentialCreate]].
 */
export interface CredentialCreateRequest {
  'nuid.credential/verified': VerifiedCredential
}

/**
 * Response object returned upon successful calls to [[credentialCreate]].
 */
export interface CredentialCreateResponse {
  'nu/id': NuID
  'nuid/credential': Credential
}

/**
 * Response object returned upon successful calls to [[challengeGet]].
 */
export interface ChallengeGetResponse {
  'nuid.credential.challenge/jwt': JWT
}

/**
 * Response object returned upon successful calls to [[challengeVerify]].
 */
export interface ChallengeVerifyResponse {
  verified: boolean
}

/**
 * @see [[credentialCreate]]
 */
export type CredentialCreateFn = (
  verifiedCredential: VerifiedCredential
) => Promise<CredentialCreateResponse>

/**
 * @see [[credentialGet]]
 */
export type CredentialGetFn = (nuid: NuID) => Promise<Credential>

/**
 * @see [[challengeGet]]
 */
export type ChallengeGetFn = (
  credential: Credential
) => Promise<ChallengeGetResponse>

/**
 * @see [[challengeVerify]]
 */
export type ChallengeVerifyFn = (
  challengeJWT: JWT,
  proof: Proof
) => Promise<ChallengeVerifyResponse>

/**
 * Public endpoints for the NuID Auth API
 */
export interface IAuthAPI {
  credentialCreate: CredentialCreateFn
  credentialGet: CredentialGetFn
  challengeGet: ChallengeGetFn
  challengeVerify: ChallengeVerifyFn
}

/**
 * Store the given credential on chain.
 * @async
 * @see [@nuid/zk]{@link https://www.npmjs.com/package/@nuid/zk} npm package
 *   `Zk.verifiableFromSecret(secret)` fn for generating verified credentials.
 *
 * @param verifiedCredential - The verified credential created by calling `Zk.verifiableFromSecret(password)`
 * @return The response object contains an encoded `nu/id` (for storing with
 *   your user data) and the associated `Credential`. The Promise may also fail
 *   and contain the failed fetch
 *   [`Response`](https://www.npmjs.com/package/node-fetch#class-response)
 *   object.
 */
export const credentialCreate: CredentialCreateFn = verifiedCredential =>
  http.post<CredentialCreateRequest, CredentialCreateResponse>(
    'auth',
    '/credential',
    {
      'nuid.credential/verified': verifiedCredential
    }
  )

/**
 * Get a credential keyed by the `nu/id`.
 * @async
 *
 * @param nuid - The encoded `nu/id` returned from calls to [[credentialCreate]].
 * @return A Promise
 */
export const credentialGet: CredentialGetFn = nuid =>
  http.get('auth', `/credential/${nuid}`)

/**
 * Get a challenge for the user's credential keyed by the `nuid`.
 * @async
 * @see [[challengeVerify]] for verifying the challenge with a [[Proof]].
 */
export const challengeGet: ChallengeGetFn = credential =>
  http.post('auth', '/challenge', credential)

export const challengeVerify: ChallengeVerifyFn = (challengeJWT, proof) =>
  http
    .post('auth', '/challenge/verify', {
      'nuid.credential.challenge/jwt': challengeJWT,
      'nuid.credential/proof': proof
    })
    .then((res: Response) =>
      res.ok ? { verified: true } : { verified: false }
    )
